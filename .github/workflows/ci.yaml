name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,uci]

    - name: Run linting with Ruff
      run: |
        ruff check dmdslab/ tests/
        ruff format --check dmdslab/ tests/

    - name: Run type checking with mypy
      run: mypy dmdslab/
      continue-on-error: true

    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=dmdslab --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    name: Build package
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Get package version
      run: |
        # Extract version from __init__.py without importing the module
        VERSION=$(python -c "
import re
with open('dmdslab/__init__.py', 'r') as f:
    content = f.read()
match = re.search(r'__version__\s*=\s*[\"\'](.*?)[\"\']', content)
if match:
    print(match.group(1))
else:
    raise ValueError('Version not found in __init__.py')
")
        echo "📦 Package version: $VERSION"
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Check if version exists on TestPyPI
      run: |
        echo "🔍 Checking TestPyPI for version $PACKAGE_VERSION..."
        if curl -s --fail "https://test.pypi.org/pypi/DmDSLab/$PACKAGE_VERSION/json" > /dev/null 2>&1; then
          echo "TESTPYPI_EXISTS=true" >> $GITHUB_ENV
          echo "⚠️ Version $PACKAGE_VERSION already exists on TestPyPI"
        else
          echo "TESTPYPI_EXISTS=false" >> $GITHUB_ENV
          echo "✅ Version $PACKAGE_VERSION not found on TestPyPI"
        fi

    - name: Check if version exists on PyPI
      run: |
        echo "🔍 Checking PyPI for version $PACKAGE_VERSION..."
        if curl -s --fail "https://pypi.org/pypi/DmDSLab/$PACKAGE_VERSION/json" > /dev/null 2>&1; then
          echo "PYPI_EXISTS=true" >> $GITHUB_ENV
          echo "⚠️ Version $PACKAGE_VERSION already exists on PyPI"
        else
          echo "PYPI_EXISTS=false" >> $GITHUB_ENV
          echo "✅ Version $PACKAGE_VERSION not found on PyPI"
        fi

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  # Публикация на TestPyPI с проверкой версии
  publish-test:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment:
      name: testpypi
      url: https://test.pypi.org/project/DmDSLab/
    permissions:
      id-token: write

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Check version and publish
      run: |
        # Get version from wheel filename more reliably
        WHEEL_FILE=$(find dist -name "DmDSLab-*.whl" | head -1)
        if [ -z "$WHEEL_FILE" ]; then
          echo "❌ No wheel file found!"
          exit 1
        fi
        
        VERSION=$(basename "$WHEEL_FILE" | sed -n 's/DmDSLab-\([^-]*\)-.*/\1/p')
        echo "Publishing version: $VERSION"
        
        if curl -s --fail "https://test.pypi.org/pypi/DmDSLab/$VERSION/json" > /dev/null 2>&1; then
          echo "⏭️ Version $VERSION already exists on TestPyPI, skipping publication"
          exit 0
        else
          echo "🚀 Publishing version $VERSION to TestPyPI"
        fi

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

  # Публикация на PyPI с проверкой версии
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/project/DmDSLab/
    permissions:
      id-token: write

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Check version and publish
      run: |
        # Get version from wheel filename more reliably
        WHEEL_FILE=$(find dist -name "DmDSLab-*.whl" | head -1)
        if [ -z "$WHEEL_FILE" ]; then
          echo "❌ No wheel file found!"
          exit 1
        fi
        
        VERSION=$(basename "$WHEEL_FILE" | sed -n 's/DmDSLab-\([^-]*\)-.*/\1/p')
        echo "Publishing version: $VERSION"
        
        if curl -s --fail "https://pypi.org/pypi/DmDSLab/$VERSION/json" > /dev/null 2>&1; then
          echo "❌ Version $VERSION already exists on PyPI!"
          echo "Please update the version in dmdslab/__init__.py before creating a release"
          exit 1
        else
          echo "🚀 Publishing version $VERSION to PyPI"
        fi

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  docs:
    name: Build documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install sphinx sphinx-rtd-theme

    - name: Build docs
      run: |
        mkdir -p docs/
        echo "# DmDSLab Documentation" > docs/index.md
        echo "Documentation will be available soon!" >> docs/index.md

    - name: Upload docs
      uses: actions/upload-artifact@v4
      with:
        name: docs
        path: docs/