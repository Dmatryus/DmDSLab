#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.
"""

import shutil
from pathlib import Path
import sys


def clean_demo_data():
    """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    print("-" * 40)
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    dirs_to_clean = [
        'data/demo',
        'data/test',
        'results/checkpoints',
        'logs'
    ]
    
    # –§–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    patterns_to_clean = [
        'checkpoint_*.json',
        '*.log',
        'test_*.pkl',
        'result_*.pkl'
    ]
    
    total_removed = 0
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    for dir_path in dirs_to_clean:
        path = Path(dir_path)
        if path.exists():
            try:
                if path.name == 'logs':
                    # –î–ª—è –ª–æ–≥–æ–≤ —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                    log_files = list(path.glob('*.log'))
                    for log_file in log_files:
                        log_file.unlink()
                        total_removed += 1
                    print(f"‚úì –û—á–∏—â–µ–Ω–æ {len(log_files)} –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ –≤ {dir_path}")
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É–¥–∞–ª—è–µ–º –≤—Å—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                    file_count = sum(1 for _ in path.rglob('*') if _.is_file())
                    shutil.rmtree(path)
                    total_removed += file_count
                    print(f"‚úì –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_path} ({file_count} —Ñ–∞–π–ª–æ–≤)")
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ {dir_path}: {e}")
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    for pattern in patterns_to_clean:
        files = list(Path('.').rglob(pattern))
        for file in files:
            try:
                file.unlink()
                total_removed += 1
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file}: {e}")
        
        if files:
            print(f"‚úì –£–¥–∞–ª–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É '{pattern}'")
    
    print(f"\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_removed}")
    
    # –í–æ—Å—Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for dir_path in ['logs', 'data', 'results']:
        Path(dir_path).mkdir(exist_ok=True)
    
    print("\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("="*60)
    print("–û–ß–ò–°–¢–ö–ê –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–• –î–ê–ù–ù–´–•")
    print("="*60)
    print()
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? (y/n): ")
    if response.lower() != 'y':
        print("–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    print()
    clean_demo_data()
    
    print("\n‚ú® –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –∑–∞–ø—É—Å–∫—É –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏!")


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n–û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
