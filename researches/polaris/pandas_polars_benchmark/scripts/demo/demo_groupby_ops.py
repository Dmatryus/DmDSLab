#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ GroupBy –æ–ø–µ—Ä–∞—Ü–∏–π.
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

import pandas as pd
import polars as pl

from utils import setup_logging
from core import Config
from data import DataGenerator, DataLoader
from operations import get_operation, get_operations_by_category
from profiling import get_profiler, ProfilingConfig


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ GroupBy –æ–ø–µ—Ä–∞—Ü–∏–π."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = setup_logging('demo_groupby', console_level='INFO')
    
    logger.info("=" * 80)
    logger.info("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø GROUPBY –û–ü–ï–†–ê–¶–ò–ô")
    logger.info("=" * 80)
    
    # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logger.phase_start("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    config = Config()
    config.data_generation.sizes = [10000]  # –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –¥–µ–º–æ
    config.data_generation.seed = 42
    
    generator = DataGenerator(
        config=config.data_generation,
        output_dir=Path('data/groupby_demo')
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    datasets = []
    mixed_info = generator._generate_and_save(
        generator.generate_mixed_data,
        10000,
        "mixed"
    )
    datasets.append(mixed_info)
    
    logger.info(f"‚úÖ –î–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω: {mixed_info.name}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    loader = DataLoader(Path('data/groupby_demo'))
    df_pandas = loader.load_pandas_csv(mixed_info.name, backend='numpy')
    df_polars = loader.load_polars_csv(mixed_info.name, lazy=False)
    
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(df_pandas)} —Å—Ç—Ä–æ–∫, {len(df_pandas.columns)} –∫–æ–ª–æ–Ω–æ–∫")
    logger.info(f"–ö–æ–ª–æ–Ω–∫–∏: {list(df_pandas.columns)[:5]}...")
    
    logger.phase_end("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö GroupBy –æ–ø–µ—Ä–∞—Ü–∏–π
    logger.phase_start("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GroupBy –æ–ø–µ—Ä–∞—Ü–∏–π")
    
    groupby_operations = get_operations_by_category('groupby')
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ GroupBy –æ–ø–µ—Ä–∞—Ü–∏–π: {len(groupby_operations)}")
    
    for operation in groupby_operations:
        logger.info(f"\n{'='*60}")
        logger.info(f"–û–ø–µ—Ä–∞—Ü–∏—è: {operation.name}")
        logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ: {operation.description}")
        logger.info(f"{'='*60}")
        
        # –¢–µ—Å—Ç Pandas
        logger.info("\nüìä Pandas:")
        result_pandas = operation.execute_pandas(df_pandas)
        if result_pandas.success:
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            logger.info(f"   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {result_pandas.metadata}")
            if hasattr(result_pandas.result, 'shape'):
                logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_pandas.result.shape}")
                logger.info(f"   –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏:")
                logger.info(f"{result_pandas.result.head(3)}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result_pandas.error}")
        
        # –¢–µ—Å—Ç Polars
        logger.info("\nüìä Polars:")
        result_polars = operation.execute_polars(df_polars)
        if result_polars.success:
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            logger.info(f"   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {result_polars.metadata}")
            if hasattr(result_polars.result, 'shape'):
                logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_polars.result.shape}")
                logger.info(f"   –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏:")
                logger.info(f"{result_polars.result.head(3)}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result_polars.error}")
    
    logger.phase_end("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GroupBy –æ–ø–µ—Ä–∞—Ü–∏–π")
    
    # 3. –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    logger.phase_start("–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫–∞
    profiling_config = ProfilingConfig(
        min_runs=3,
        max_runs=5,
        target_cv=0.20,  # 20% –¥–ª—è –¥–µ–º–æ
        isolate_process=False  # –î–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    )
    
    results = []
    
    with get_profiler(profiling_config) as profiler:
        # –ü—Ä–æ—Ñ–∏–ª–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ single_column_groupby –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        operation = get_operation('single_column_groupby', 'groupby')
        
        if operation:
            logger.info(f"\n–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: {operation.name}")
            
            # Pandas
            profile_result = profiler.profile_operation(
                lambda: operation.execute_pandas(df_pandas),
                operation_name=operation.name,
                library='pandas',
                dataset_name=mixed_info.name
            )
            results.append(profile_result)
            
            # Polars
            profile_result = profiler.profile_operation(
                lambda: operation.execute_polars(df_polars),
                operation_name=operation.name,
                library='polars',
                dataset_name=mixed_info.name
            )
            results.append(profile_result)
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è:")
    logger.info("-" * 60)
    logger.info(f"{'–û–ø–µ—Ä–∞—Ü–∏—è':<25} {'–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞':<10} {'–í—Ä–µ–º—è (—Å)':<12} {'–ü–∞–º—è—Ç—å (MB)':<12}")
    logger.info("-" * 60)
    
    for result in results:
        if result.success:
            logger.info(
                f"{result.operation_name:<25} "
                f"{result.library:<10} "
                f"{result.mean_time:<12.4f} "
                f"{result.peak_memory_mb:<12.1f}"
            )
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    if len(results) == 2 and all(r.success for r in results):
        pandas_time = results[0].mean_time
        polars_time = results[1].mean_time
        speedup = pandas_time / polars_time
        
        logger.info(f"\nüöÄ Polars –±—ã—Å—Ç—Ä–µ–µ –≤ {speedup:.1f}x —Ä–∞–∑!")
    
    logger.phase_end("–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    # 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    logger.phase_start("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã")
    
    # –ü—Ä–∏–º–µ—Ä —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    logger.info("\nüìù –ü—Ä–∏–º–µ—Ä —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
    
    # Multi aggregation
    multi_agg = get_operation('multi_aggregation', 'groupby')
    if multi_agg:
        result = multi_agg.execute_pandas(df_pandas)
        if result.success:
            logger.info(f"Multi aggregation result shape: {result.result.shape}")
            logger.info(f"Total aggregations: {result.metadata['total_aggregations']}")
    
    # Window functions
    window_op = get_operation('window_functions', 'groupby')
    if window_op:
        result = window_op.execute_polars(df_polars, window_size=20)
        if result.success:
            logger.info(f"Window functions added {result.metadata['new_columns']} new columns")
    
    logger.phase_end("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã")
    
    # –ò—Ç–æ–≥–∏
    logger.info("\n" + "=" * 80)
    logger.info("–ò–¢–û–ì–ò")
    logger.info("=" * 80)
    logger.info("\n‚úÖ –í—Å–µ GroupBy –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã:")
    logger.info("  1. single_column_groupby - –ø—Ä–æ—Å—Ç–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞")
    logger.info("  2. multi_column_groupby - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–æ–ª–æ–Ω–∫–∞–º")
    logger.info("  3. multi_aggregation - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
    logger.info("  4. window_functions - –æ–∫–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    logger.info("\nüöÄ GroupBy –æ–ø–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –±–µ–Ω—á–º–∞—Ä–∫–µ!")


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
