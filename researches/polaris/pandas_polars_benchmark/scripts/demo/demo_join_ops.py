#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Join –æ–ø–µ—Ä–∞—Ü–∏–π.
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
src_path = Path(__file__).parent.parent.parent / "src"
sys.path.insert(0, str(src_path))

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = Path(__file__).parent.parent.parent.parent.parent.parent
sys.path.insert(0, str(project_root))

import pandas as pd
import polars as pl
import numpy as np
import time

from utils import setup_logging
from operations import get_operation, get_operations_by_category, get_all_operations
from profiling import get_profiler, ProfilingConfig

# –Ø–≤–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —á—Ç–æ–±—ã –æ–Ω–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å
try:
    from operations import join_ops, groupby_ops, sort_ops
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
    print("–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞...")
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–º–ø–æ—Ä—Ç–∞
    import operations.join_ops
    import operations.groupby_ops  
    import operations.sort_ops


def create_test_data(n_rows: int = 10000):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ join –æ–ø–µ—Ä–∞—Ü–∏–π."""
    np.random.seed(42)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = {
        'customer_id': np.random.choice(['C' + str(i) for i in range(n_rows // 10)], n_rows),
        'product_id': np.random.choice(['P' + str(i) for i in range(50)], n_rows),
        'order_id': [f'ORDER_{i:06d}' for i in range(n_rows)],
        'quantity': np.random.randint(1, 20, n_rows),
        'price': np.random.uniform(10, 1000, n_rows).round(2),
        'discount': np.random.uniform(0, 0.3, n_rows).round(2),
        'order_date': pd.date_range('2023-01-01', periods=n_rows, freq='15min'),
        'status': np.random.choice(['pending', 'shipped', 'delivered', 'cancelled'], n_rows),
        'region': np.random.choice(['North', 'South', 'East', 'West'], n_rows),
        'priority': np.random.choice([1, 2, 3, 4, 5], n_rows)
    }
    
    return pd.DataFrame(data), pl.DataFrame(data)


def demonstrate_join_operations():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö Join –æ–ø–µ—Ä–∞—Ü–∏–π."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = setup_logging('demo_join', console_level='INFO')
    
    logger.info("=" * 80)
    logger.info("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø JOIN –û–ü–ï–†–ê–¶–ò–ô")
    logger.info("=" * 80)
    
    # –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
    logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:")
    all_ops = get_all_operations()
    for category, ops_list in all_ops.items():
        logger.info(f"  {category}: {len(ops_list)} –æ–ø–µ—Ä–∞—Ü–∏–π")
        for op in ops_list:
            logger.info(f"    - {op.name}")
    
    # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    logger.phase_start("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    df_pandas, df_polars = create_test_data(10000)
    
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(df_pandas)} —Å—Ç—Ä–æ–∫")
    logger.info(f"–ö–æ–ª–æ–Ω–∫–∏: {list(df_pandas.columns)}")
    logger.info("\n–ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
    logger.info(df_pandas.head(3).to_string())
    
    logger.phase_end("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö Join –æ–ø–µ—Ä–∞—Ü–∏–π
    logger.phase_start("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Join –æ–ø–µ—Ä–∞—Ü–∏–π")
    
    join_operations = get_operations_by_category('join')
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ Join –æ–ø–µ—Ä–∞—Ü–∏–π: {len(join_operations)}")
    
    if len(join_operations) == 0:
        logger.error("‚ùå Join –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è join_ops")
        return
    
    for operation in join_operations:
        logger.info(f"\n{'='*60}")
        logger.info(f"–û–ø–µ—Ä–∞—Ü–∏—è: {operation.name}")
        logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ: {operation.description}")
        logger.info(f"{'='*60}")
        
        # –¢–µ—Å—Ç Pandas
        logger.info("\nüìä Pandas:")
        start = time.time()
        result_pandas = operation.execute_pandas(df_pandas)
        pandas_time = time.time() - start
        
        if result_pandas.success:
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {pandas_time:.3f}—Å")
            meta = result_pandas.metadata
            logger.info(f"   –¢–∏–ø join: {meta.get('join_type')}")
            logger.info(f"   –ö–ª—é—á–∏: {meta.get('join_keys')}")
            
            if 'left_rows' in meta:
                logger.info(f"   –õ–µ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞: {meta['left_rows']} —Å—Ç—Ä–æ–∫")
                logger.info(f"   –ü—Ä–∞–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞: {meta['right_rows']} —Å—Ç—Ä–æ–∫")
                logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {meta['result_rows']} —Å—Ç—Ä–æ–∫")
                
                # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è/—É–º–µ–Ω—å—à–µ–Ω–∏—è
                expansion = meta['result_rows'] / meta['left_rows']
                logger.info(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {expansion:.2f}x")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ join
            if operation.name == 'left_join' and 'left_only_rows' in meta:
                logger.info(f"   –¢–æ–ª—å–∫–æ –≤ –ª–µ–≤–æ–π: {meta['left_only_rows']} —Å—Ç—Ä–æ–∫")
                logger.info(f"   –í –æ–±–µ–∏—Ö: {meta['both_rows']} —Å—Ç—Ä–æ–∫")
            
            if operation.name == 'merge_multiple_keys' and 'selectivity' in meta:
                logger.info(f"   –°–µ–ª–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {meta['selectivity']:.6f}")
            
            if operation.name == 'asof_join' and 'match_rate' in meta:
                logger.info(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {meta['match_rate']*100:.1f}%")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result_pandas.error}")
        
        # –¢–µ—Å—Ç Polars
        logger.info("\nüìä Polars:")
        start = time.time()
        result_polars = operation.execute_polars(df_polars)
        polars_time = time.time() - start
        
        if result_polars.success:
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {polars_time:.3f}—Å")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if result_pandas.success:
                speedup = pandas_time / polars_time
                logger.info(f"   üöÄ Polars –±—ã—Å—Ç—Ä–µ–µ –≤ {speedup:.1f}x —Ä–∞–∑")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result_polars.error}")
    
    logger.phase_end("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Join –æ–ø–µ—Ä–∞—Ü–∏–π")
    
    # 3. –ë–µ–Ω—á–º–∞—Ä–∫ —Å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫–æ–º
    logger.phase_start("–ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–∏–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.info("\n–°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞...")
    df_bench_pd, df_bench_pl = create_test_data(50000)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫–∞
    config = ProfilingConfig(
        min_runs=3,
        max_runs=10,
        target_cv=0.05,
        memory_sampling_interval=0.01,
        warmup_runs=1
    )
    
    profiler = get_profiler(config)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º inner join
    inner_join_op = get_operation('inner_join', 'join')
    
    logger.info("\nüìä –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ Inner Join:")
    
    # Pandas
    logger.info("  Pandas...")
    result_pd = profiler.profile_operation(
        inner_join_op, 
        df_bench_pd,
        library='pandas'
    )
    if result_pd.success:
        logger.info(f"    –í—Ä–µ–º—è: {result_pd.execution_time_mean:.3f}—Å ¬± {result_pd.execution_time_std:.3f}—Å")
        logger.info(f"    –ü–∞–º—è—Ç—å (–ø–∏–∫): {result_pd.memory_peak_mb:.1f} MB")
        logger.info(f"    CV: {result_pd.cv:.3f}")
    
    # Polars
    logger.info("  Polars...")
    result_pl = profiler.profile_operation(
        inner_join_op,
        df_bench_pl,
        library='polars'
    )
    if result_pl.success:
        logger.info(f"    –í—Ä–µ–º—è: {result_pl.execution_time_mean:.3f}—Å ¬± {result_pl.execution_time_std:.3f}—Å")
        logger.info(f"    –ü–∞–º—è—Ç—å (–ø–∏–∫): {result_pl.memory_peak_mb:.1f} MB")
        logger.info(f"    CV: {result_pl.cv:.3f}")
    
    if result_pd.success and result_pl.success:
        speedup = result_pd.execution_time_mean / result_pl.execution_time_mean
        memory_ratio = result_pl.memory_peak_mb / result_pd.memory_peak_mb
        logger.info(f"\n  üöÄ Polars –±—ã—Å—Ç—Ä–µ–µ –≤ {speedup:.1f}x —Ä–∞–∑")
        logger.info(f"  üíæ Polars –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {memory_ratio:.1%} –æ—Ç –ø–∞–º—è—Ç–∏ Pandas")
    
    logger.phase_end("–ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    # 4. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
    logger.phase_start("–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã")
    
    # –ü—Ä–∏–º–µ—Ä 1: Join —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    logger.info("\nüìù –ü—Ä–∏–º–µ—Ä 1: Inner join —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é inner join
    inner_join = get_operation('inner_join', 'join')
    
    if inner_join is None:
        logger.error("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è inner_join –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        logger.info("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã...")
        logger.phase_end("–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã")
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–µ—Ä–µ–¥ join
    df_north_pd = df_pandas[df_pandas['region'] == 'North']
    df_north_pl = df_polars.filter(pl.col('region') == 'North')
    
    result_pd = inner_join.execute_pandas(df_north_pd)
    result_pl = inner_join.execute_polars(df_north_pl)
    
    if result_pd.success and result_pl.success:
        logger.info(f"  –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –¥–æ join: {len(df_north_pd)} —Å—Ç—Ä–æ–∫")
        logger.info(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç join: {result_pd.metadata['result_rows']} —Å—Ç—Ä–æ–∫")
    
    # –ü—Ä–∏–º–µ—Ä 2: –¶–µ–ø–æ—á–∫–∞ join –æ–ø–µ—Ä–∞—Ü–∏–π
    logger.info("\nüìù –ü—Ä–∏–º–µ—Ä 2: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ join –æ–ø–µ—Ä–∞—Ü–∏–∏")
    
    if result_pd.success:
        # –í—Ç–æ—Ä–æ–π join –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–µ—Ä–≤–æ–≥–æ
        left_join = get_operation('left_join', 'join')
        result2_pd = left_join.execute_pandas(result_pd.result)
        
        if result2_pd.success:
            logger.info(f"  –ü–µ—Ä–≤—ã–π join: {result_pd.metadata['result_rows']} —Å—Ç—Ä–æ–∫")
            logger.info(f"  –í—Ç–æ—Ä–æ–π join: {result2_pd.metadata['result_rows']} —Å—Ç—Ä–æ–∫")
    
    logger.phase_end("–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã")
    
    # 5. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ Polars
    logger.phase_start("–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ Polars")
    
    logger.info("\nüöÄ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Polars –≤ join –æ–ø–µ—Ä–∞—Ü–∏—è—Ö:")
    logger.info("  1. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ join")
    logger.info("  2. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ zero-copy")
    logger.info("  3. –£–º–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ lazy mode")
    logger.info("  4. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è lazy evaluation
    logger.info("\nüìù –ü—Ä–∏–º–µ—Ä lazy evaluation:")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    lazy_df = df_polars.lazy()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—É—é —Ü–µ–ø–æ—á–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π
    result = (
        lazy_df
        .filter(pl.col('quantity') > 5)
        .join(
            lazy_df.filter(pl.col('price') > 100),
            on=['customer_id', 'product_id'],
            how='inner'
        )
        .group_by('region')
        .agg([
            pl.col('quantity').sum().alias('total_quantity'),
            pl.col('price').mean().alias('avg_price')
        ])
        .sort('total_quantity', descending=True)
    )
    
    # –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    logger.info("  –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω Polars query planner")
    logger.info("  –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –î–û join –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º
    final_result = result.collect()
    logger.info(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {len(final_result)} —Ä–µ–≥–∏–æ–Ω–æ–≤")
    
    logger.phase_end("–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ Polars")
    
    # –ò—Ç–æ–≥–∏
    logger.info("\n" + "=" * 80)
    logger.info("–ò–¢–û–ì–ò")
    logger.info("=" * 80)
    logger.info("\n‚úÖ –í—Å–µ Join –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã:")
    logger.info("  1. inner_join - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    logger.info("  2. left_join - –ª–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    logger.info("  3. merge_multiple_keys - join –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–ª—é—á–∞–º")
    logger.info("  4. asof_join - –≤—Ä–µ–º–µ–Ω–Ω–æ–π join")
    
    logger.info("\nüöÄ –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:")
    logger.info("  - Polars –æ–±—ã—á–Ω–æ –≤ 3-10x –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ join –æ–ø–µ—Ä–∞—Ü–∏—è—Ö")
    logger.info("  - –£—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ—Ç —Å —Ä–∞–∑–º–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö")
    logger.info("  - Lazy evaluation –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
    logger.info("  - Asof join –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")


if __name__ == '__main__':
    try:
        demonstrate_join_operations()
    except KeyboardInterrupt:
        print("\n\n–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()