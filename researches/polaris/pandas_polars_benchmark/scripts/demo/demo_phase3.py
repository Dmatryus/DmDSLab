#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –§–∞–∑—ã 3 –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
"""

import sys
import platform
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))


def print_header():
    """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫."""
    print("=" * 80)
    print("–§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –§–ê–ó–´ 3: –°–ò–°–¢–ï–ú–ê –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 80)
    print(f"\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.system()} {platform.version()}")
    print(f"Python: {sys.version.split()[0]}")
    print(f"–°–∏—Å—Ç–µ–º–∞: {sys.platform}")
    print()


def check_imports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã."""
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    print("-" * 40)

    try:
        # Core
        from core import (
            Config,
            CheckpointManager,
            BenchmarkState,
            TaskIdentifier,
            ProgressTracker,
        )

        print("‚úÖ Core –º–æ–¥—É–ª–∏")

        # Profiling
        from profiling import (
            MemoryTracker,
            Timer,
            Profiler,
            ProfileResult,
            ProfilingConfig,
            get_profiler,
            measure_memory,
            measure_time,
        )

        print("‚úÖ Profiling –º–æ–¥—É–ª–∏")

        # Utils
        from utils import setup_logging, get_logger

        print("‚úÖ Utils –º–æ–¥—É–ª–∏")

        # Data
        from data import DataGenerator, DataLoader, DataSaver

        print("‚úÖ Data –º–æ–¥—É–ª–∏")

        return True

    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False


def check_checkpoint_functionality():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤."""
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤...")
    print("-" * 40)

    from core import CheckpointManager, TaskIdentifier
    from profiling import ProfileResult

    test_dir = Path("data/final_test")
    test_dir.mkdir(parents=True, exist_ok=True)

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        manager = CheckpointManager(checkpoint_dir=test_dir)
        state = manager.initialize_state("final_test", {}, 3)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = ProfileResult(
            operation_name="test",
            library="test_lib",
            success=True,
            mean_time=0.1,
            peak_memory_mb=50.0,
        )
        manager.update_progress("task_1", result=result)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        saved = manager.save_checkpoint(force=True)

        if saved:
            print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤")
            return False

        # –ó–∞–≥—Ä—É–∂–∞–µ–º
        new_manager = CheckpointManager(checkpoint_dir=test_dir)
        loaded = new_manager.load_checkpoint()

        if loaded and loaded.completed_operations == 1:
            print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤")
            return False

        # –û—á–∏—Å—Ç–∫–∞
        manager.clear_checkpoint()
        import shutil

        shutil.rmtree(test_dir)

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def check_profiling():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è...")
    print("-" * 40)

    from profiling import get_profiler, ProfilingConfig
    import time

    try:
        config = ProfilingConfig(min_runs=2, max_runs=3, isolate_process=False)

        with get_profiler(config) as profiler:

            def simple_op():
                time.sleep(0.01)
                return [1, 2, 3]

            result = profiler.profile_operation(
                simple_op, operation_name="test", library="test"
            )

            if result.success and result.mean_time > 0:
                print("‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   –†–µ–∂–∏–º: {'isolated' if config.isolate_process else 'inline'}")
                print(f"   –í—Ä–µ–º—è: {result.mean_time:.3f}—Å")
                print(f"   –ü–∞–º—è—Ç—å: {result.peak_memory_mb:.1f}MB")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def check_progress_tracking():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...")
    print("-" * 40)

    from core import ProgressTracker
    import time

    try:
        # –ë–µ–∑ progress bar –¥–ª—è —Ç–µ—Å—Ç–∞
        tracker = ProgressTracker(5, show_progress_bar=False)

        for i in range(3):
            tracker.start_operation(f"op_{i}", "test", "data")
            time.sleep(0.01)
            tracker.end_operation(success=True)

        info = tracker.get_progress_info()

        if info["completed"] == 3:
            print("‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {info['completed']}/{info['total']}")
            print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {info['progress_percentage']:.0f}%")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def check_platform_specific():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏."""
    print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
    print("-" * 40)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ fcntl
    if sys.platform == "win32":
        try:
            import fcntl

            print("‚ö†Ô∏è  fcntl –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞ Windows (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ)")
        except ImportError:
            print("‚úÖ fcntl –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞ Windows (–æ–∂–∏–¥–∞–µ–º–æ)")
    else:
        try:
            import fcntl

            print("‚úÖ fcntl –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ Unix-—Å–∏—Å—Ç–µ–º–µ")
        except ImportError:
            print("‚ùå fcntl –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ Unix-—Å–∏—Å—Ç–µ–º–µ")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    from profiling import ProfilingConfig

    config = ProfilingConfig(isolate_process=True)

    if sys.platform == "win32":
        if not config.isolate_process:
            print("‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –Ω–∞ Windows")
        else:
            print("‚ö†Ô∏è  –ò–∑–æ–ª—è—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ –Ω–∞ Windows (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)")
    else:
        if config.isolate_process:
            print("‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            print("‚ö†Ô∏è  –ò–∑–æ–ª—è—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –Ω–∞ Unix-—Å–∏—Å—Ç–µ–º–µ")

    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    print_header()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    checks = [
        ("–ò–º–ø–æ—Ä—Ç—ã", check_imports),
        ("–ß–µ–∫–ø–æ–∏–Ω—Ç—ã", check_checkpoint_functionality),
        ("–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", check_profiling),
        ("–ü—Ä–æ–≥—Ä–µ—Å—Å", check_progress_tracking),
        ("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞", check_platform_specific),
    ]

    results = []
    for name, check_func in checks:
        try:
            success = check_func()
            results.append((name, success))
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {name}: {e}")
            import traceback

            traceback.print_exc()
            results.append((name, False))

    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 80)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–ò–ù–ê–õ–¨–ù–û–ô –ü–†–û–í–ï–†–ö–ò")
    print("=" * 80)

    all_passed = True
    for name, success in results:
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {name}")
        if not success:
            all_passed = False

    print("\n" + "=" * 80)

    if all_passed:
        print("\nüéâ –§–ê–ó–ê 3 –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        print("\n–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ:")
        print(f"  ‚úÖ {platform.system()} {platform.release()}")
        print(f"  ‚úÖ Python {sys.version.split()[0]}")
        print(f"  ‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
        print(f"  ‚úÖ –ß–µ–∫–ø–æ–∏–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è")
        print(f"  ‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"  ‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")

        print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é:")
        print(f"   python scripts{Path('/')}demo_phase3_full.py")
        print("\n2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Ä–∞–±–æ—Ç—É —Å —á–µ–∫–ø–æ–∏–Ω—Ç–∞–º–∏:")
        print(f"   python scripts{Path('/')}demo_checkpoint_progress.py")
        print("\n3. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –§–∞–∑–µ 4 - —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π!")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
        print("   pip install -r requirements.txt")
        print("\n2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        print("\n3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–æ–∫")

    return all_passed


if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
