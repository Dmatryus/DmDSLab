#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –§–∞–∑—ã 4: –û–ø–µ—Ä–∞—Ü–∏–∏ –±–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥–∞.
"""

import sys
from pathlib import Path
import pandas as pd
import polars as pl

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã
from utils import setup_logging

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —è–¥—Ä–∞
from core import Config
from core.checkpoint import CheckpointManager
from core.progress import ProgressTracker

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –¥–∞–Ω–Ω—ã—Ö
from data import DataGenerator, DataLoader

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
from operations import (
    get_operation,
    get_all_operations,
    get_operations_by_category,
    list_operations,
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
from profiling import get_profiler, ProfilingConfig


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = setup_logging("demo_phase4", console_level="INFO")

    logger.benchmark_start(
        {"benchmark": {"name": "Phase 4 Operations Demo", "version": "1.0.0"}}
    )

    # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logger.phase_start("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

    config = Config()
    config.data_generation.sizes = [5000]  # –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –¥–µ–º–æ
    config.data_generation.seed = 42

    generator = DataGenerator(
        config=config.data_generation, output_dir=Path("data/phase4_demo")
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ —Ç–∏–ø—ã)
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    datasets = []
    mixed_info = generator._generate_and_save(
        generator.generate_mixed_data, 5000, "mixed"
    )
    datasets.append(mixed_info)

    logger.info(f"‚úÖ –î–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω: {mixed_info.name}")
    logger.info(f"   –†–∞–∑–º–µ—Ä: {mixed_info.size:,} —Å—Ç—Ä–æ–∫")
    logger.info(f"   –ö–æ–ª–æ–Ω–æ–∫: {len(mixed_info.columns)}")
    logger.info(f"   –¢–∏–ø—ã –∫–æ–ª–æ–Ω–æ–∫:")
    for col in mixed_info.columns[:5]:  # –ü–µ—Ä–≤—ã–µ 5 –∫–æ–ª–æ–Ω–æ–∫
        logger.info(f"     - {col['name']}: {col['dtype']}")

    logger.phase_end("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

    # 2. –û–±–∑–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    logger.phase_start("–û–±–∑–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–π")

    all_operations = get_all_operations()

    logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for category, operations in all_operations.items():
        logger.info(f"\nüìÅ {category.upper()}:")
        for op in operations:
            logger.info(f"   - {op.name}: {op.description}")

    total_ops = sum(len(ops) for ops in all_operations.values())
    logger.info(f"\n‚úÖ –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {total_ops}")

    logger.phase_end("–û–±–∑–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–π")

    # 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–π
    logger.phase_start("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    loader = DataLoader(Path("data/phase4_demo"))

    # Pandas DataFrame
    logger.info("\nüìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Pandas...")
    df_pandas = loader.load_pandas_csv(mixed_info.name, backend="numpy")
    logger.info(
        f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(df_pandas)} —Å—Ç—Ä–æ–∫, {len(df_pandas.columns)} –∫–æ–ª–æ–Ω–æ–∫"
    )

    # Polars DataFrame
    logger.info("\nüìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Polars...")
    df_polars = loader.load_polars_csv(mixed_info.name, lazy=False)
    logger.info(
        f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(df_polars)} —Å—Ç—Ä–æ–∫, {len(df_polars.columns)} –∫–æ–ª–æ–Ω–æ–∫"
    )

    # –î–µ–º–æ: –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    logger.info("\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")

    simple_filter = get_operation("simple_filter", "filter")
    if simple_filter:
        # Pandas
        result = simple_filter.execute_pandas(df_pandas)
        if result.success:
            logger.info(
                f"   Pandas: {result.metadata['rows_before']} ‚Üí {result.metadata['rows_after']} —Å—Ç—Ä–æ–∫"
            )
            logger.info(
                f"   –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {(1-result.metadata['filtered_ratio'])*100:.1f}%"
            )

        # Polars
        result = simple_filter.execute_polars(df_polars)
        if result.success:
            logger.info(f"   Polars: –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

    # –î–µ–º–æ: –°–ª–æ–∂–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    logger.info("\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")

    complex_filter = get_operation("complex_filter", "filter")
    if complex_filter:
        result = complex_filter.execute_pandas(df_pandas)
        if result.success:
            logger.info(f"   –£—Å–ª–æ–≤–∏—è: {result.metadata['conditions']['numeric']}")
            logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.metadata['rows_after']} —Å—Ç—Ä–æ–∫")

    logger.phase_end("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π")

    # 4. –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
    logger.phase_start("–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫–∞
    profiling_config = ProfilingConfig(
        min_runs=3, max_runs=10, target_cv=0.15, isolate_process=False  # 15% –¥–ª—è –¥–µ–º–æ
    )

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–µ–∫–µ—Ä
    operations_to_profile = [
        ("io", "read_csv"),
        ("io", "write_parquet"),
        ("filter", "simple_filter"),
        ("filter", "isin_filter"),
    ]

    total_tasks = len(operations_to_profile) * 2  # Pandas + Polars

    with ProgressTracker(total_tasks, show_progress_bar=True) as progress:
        with get_profiler(profiling_config) as profiler:

            results = []

            for category, op_name in operations_to_profile:
                operation = get_operation(op_name, category)

                if operation:
                    # –ü—Ä–æ—Ñ–∏–ª–∏—Ä—É–µ–º Pandas
                    progress.start_operation(op_name, "pandas", mixed_info.name)

                    if category == "io" and op_name.startswith("read"):
                        # –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —á—Ç–µ–Ω–∏—è
                        profile_result = profiler.profile_operation(
                            lambda: operation.execute_pandas(
                                None, dataset_name=mixed_info.name
                            ),
                            operation_name=op_name,
                            library="pandas",
                            dataset_name=mixed_info.name,
                        )
                    else:
                        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                        profile_result = profiler.profile_operation(
                            lambda: operation.execute_pandas(df_pandas),
                            operation_name=op_name,
                            library="pandas",
                            dataset_name=mixed_info.name,
                        )

                    results.append(profile_result)
                    progress.end_operation(profile_result.success)

                    # –ü—Ä–æ—Ñ–∏–ª–∏—Ä—É–µ–º Polars
                    progress.start_operation(op_name, "polars", mixed_info.name)

                    if category == "io" and op_name.startswith("read"):
                        profile_result = profiler.profile_operation(
                            lambda: operation.execute_polars(
                                None, dataset_name=mixed_info.name
                            ),
                            operation_name=op_name,
                            library="polars",
                            dataset_name=mixed_info.name,
                        )
                    else:
                        profile_result = profiler.profile_operation(
                            lambda: operation.execute_polars(df_polars),
                            operation_name=op_name,
                            library="polars",
                            dataset_name=mixed_info.name,
                        )

                    results.append(profile_result)
                    progress.end_operation(profile_result.success)

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è:")
    logger.info("-" * 60)
    logger.info(
        f"{'–û–ø–µ—Ä–∞—Ü–∏—è':<20} {'–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞':<10} {'–í—Ä–µ–º—è (—Å)':<12} {'–ü–∞–º—è—Ç—å (MB)':<12}"
    )
    logger.info("-" * 60)

    for result in results:
        if result.success:
            logger.info(
                f"{result.operation_name:<20} "
                f"{result.library:<10} "
                f"{result.mean_time:<12.3f} "
                f"{result.peak_memory_mb:<12.1f}"
            )

    logger.phase_end("–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

    # 5. –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    logger.phase_start("–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
    comparison = {}
    for result in results:
        if result.success:
            if result.operation_name not in comparison:
                comparison[result.operation_name] = {}
            comparison[result.operation_name][result.library] = {
                "time": result.mean_time,
                "memory": result.peak_memory_mb,
            }

    logger.info("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ Polars vs Pandas:")
    for op_name, libs in comparison.items():
        if "pandas" in libs and "polars" in libs:
            time_ratio = libs["pandas"]["time"] / libs["polars"]["time"]
            memory_ratio = libs["pandas"]["memory"] / libs["polars"]["memory"]

            logger.info(f"\n{op_name}:")
            logger.info(f"  –°–∫–æ—Ä–æ—Å—Ç—å: Polars –≤ {time_ratio:.1f}x –±—ã—Å—Ç—Ä–µ–µ")
            logger.info(
                f"  –ü–∞–º—è—Ç—å: Polars –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {1/memory_ratio:.1f}x –º–µ–Ω—å—à–µ –ø–∞–º—è—Ç–∏"
            )

    logger.phase_end("–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")

    # –ò—Ç–æ–≥–∏
    logger.benchmark_end(success=True, duration=60)

    logger.info("\n" + "=" * 80)
    logger.info("–ò–¢–û–ì–ò –§–ê–ó–´ 4")
    logger.info("=" * 80)
    logger.info("\n‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
    logger.info("  1. –ë–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–π")
    logger.info("  2. IO –æ–ø–µ—Ä–∞—Ü–∏–∏ (—á—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å CSV –∏ Parquet)")
    logger.info("  3. –û–ø–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–ø—Ä–æ—Å—Ç–∞—è, —Å–ª–æ–∂–Ω–∞—è, isin, –ø–∞—Ç—Ç–µ—Ä–Ω—ã)")
    logger.info("  4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
    logger.info("  5. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π")

    logger.info("\nüìã –ì–æ—Ç–æ–≤—ã–µ –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    logger.info("  - GroupBy –æ–ø–µ—Ä–∞—Ü–∏–∏")
    logger.info("  - –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
    logger.info("  - Join –æ–ø–µ—Ä–∞—Ü–∏–∏")
    logger.info("  - –°—Ç—Ä–æ–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")

    logger.info("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π!")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)
