#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Sort –æ–ø–µ—Ä–∞—Ü–∏–π.
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

import pandas as pd
import polars as pl
import numpy as np
import time

from utils import setup_logging
from core import Config
from data import DataGenerator, DataLoader
from operations import get_operation, get_operations_by_category
from profiling import get_profiler, ProfilingConfig


def demonstrate_sort_operations():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö Sort –æ–ø–µ—Ä–∞—Ü–∏–π."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = setup_logging('demo_sort', console_level='INFO')
    
    logger.info("=" * 80)
    logger.info("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø SORT –û–ü–ï–†–ê–¶–ò–ô")
    logger.info("=" * 80)
    
    # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logger.phase_start("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    np.random.seed(42)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    n_rows = 10000
    data = {
        'id': range(n_rows),
        'category': np.random.choice(['A', 'B', 'C', 'D', 'E'], n_rows),
        'value': np.random.randn(n_rows) * 100,
        'quantity': np.random.randint(1, 100, n_rows),
        'price': np.random.uniform(10, 1000, n_rows),
        'date': pd.date_range('2020-01-01', periods=n_rows, freq='H'),
        'product': ['Product_' + str(i % 50) for i in range(n_rows)],
        'status': np.random.choice(['active', 'pending', 'closed', None], n_rows, p=[0.5, 0.3, 0.15, 0.05])
    }
    
    df_pandas = pd.DataFrame(data)
    df_polars = pl.DataFrame(data)
    
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç: {n_rows} —Å—Ç—Ä–æ–∫, {len(data)} –∫–æ–ª–æ–Ω–æ–∫")
    logger.info(f"–ö–æ–ª–æ–Ω–∫–∏: {list(df_pandas.columns)}")
    logger.info(f"–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:")
    for col, dtype in df_pandas.dtypes.items():
        logger.info(f"  - {col}: {dtype}")
    
    logger.phase_end("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö Sort –æ–ø–µ—Ä–∞—Ü–∏–π
    logger.phase_start("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Sort –æ–ø–µ—Ä–∞—Ü–∏–π")
    
    sort_operations = get_operations_by_category('sort')
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ Sort –æ–ø–µ—Ä–∞—Ü–∏–π: {len(sort_operations)}")
    
    for operation in sort_operations:
        logger.info(f"\n{'='*60}")
        logger.info(f"–û–ø–µ—Ä–∞—Ü–∏—è: {operation.name}")
        logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ: {operation.description}")
        logger.info(f"{'='*60}")
        
        # –¢–µ—Å—Ç Pandas
        logger.info("\nüìä Pandas:")
        start = time.time()
        result_pandas = operation.execute_pandas(df_pandas)
        pandas_time = time.time() - start
        
        if result_pandas.success:
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {pandas_time:.3f}—Å")
            logger.info(f"   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {result_pandas.metadata}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è single_column_sort
            if operation.name == 'single_column_sort' and 'column' in result_pandas.metadata:
                col = result_pandas.metadata['column']
                is_sorted = result_pandas.result[col].is_monotonic_increasing
                logger.info(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {'‚úÖ –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ' if is_sorted else '‚ùå –ù–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ'}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result_pandas.error}")
        
        # –¢–µ—Å—Ç Polars
        logger.info("\nüìä Polars:")
        start = time.time()
        result_polars = operation.execute_polars(df_polars)
        polars_time = time.time() - start
        
        if result_polars.success:
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {polars_time:.3f}—Å")
            logger.info(f"   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {result_polars.metadata}")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
            if result_pandas.success:
                speedup = pandas_time / polars_time
                logger.info(f"   üöÄ Polars –±—ã—Å—Ç—Ä–µ–µ –≤ {speedup:.1f}x —Ä–∞–∑")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result_polars.error}")
    
    logger.phase_end("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Sort –æ–ø–µ—Ä–∞—Ü–∏–π")
    
    # 3. –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    logger.phase_start("–î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã")
    
    # –ü—Ä–∏–º–µ—Ä 1: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
    logger.info("\nüìù –ü—Ä–∏–º–µ—Ä 1: Multi-column sort —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏")
    multi_sort = get_operation('multi_column_sort', 'sort')
    if multi_sort:
        # –Ø–≤–Ω–æ –∑–∞–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        result = multi_sort.execute_pandas(
            df_pandas,
            columns=['category', 'value', 'date'],
            ascending=[True, False, True]  # category ASC, value DESC, date ASC
        )
        
        if result.success:
            logger.info("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ:")
            for col, asc in zip(result.metadata['columns'], result.metadata['ascending']):
                logger.info(f"  - {col}: {'ASC' if asc else 'DESC'}")
            logger.info(f"–ü–µ—Ä–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {result.metadata['first_row_values']}")
    
    # –ü—Ä–∏–º–µ—Ä 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    logger.info("\nüìù –ü—Ä–∏–º–µ—Ä 2: –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞")
    stable_sort = get_operation('stable_sort', 'sort')
    if stable_sort:
        result = stable_sort.execute_pandas(df_pandas)
        if result.success:
            logger.info(f"–ö–æ–ª–æ–Ω–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {result.metadata['column']}")
            logger.info(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {result.metadata['unique_count']}")
            logger.info(f"–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: {result.metadata['stability_verified']}")
    
    logger.phase_end("–î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã")
    
    # 4. –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö
    logger.phase_start("–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç—ã —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
    sizes = [1000, 10000, 100000]
    results = []
    
    profiling_config = ProfilingConfig(
        min_runs=3,
        max_runs=5,
        target_cv=0.20,
        isolate_process=False
    )
    
    single_sort = get_operation('single_column_sort', 'sort')
    
    with get_profiler(profiling_config) as profiler:
        for size in sizes:
            logger.info(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ {size:,} —Å—Ç—Ä–æ–∫–∞—Ö...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            test_data = {
                'value': np.random.randn(size) * 100,
                'category': np.random.choice(['A', 'B', 'C', 'D', 'E'], size),
                'date': pd.date_range('2020-01-01', periods=size, freq='min')
            }
            
            df_pd = pd.DataFrame(test_data)
            df_pl = pl.DataFrame(test_data)
            
            # –ü—Ä–æ—Ñ–∏–ª–∏—Ä—É–µ–º Pandas
            result_pd = profiler.profile_operation(
                lambda: single_sort.execute_pandas(df_pd),
                operation_name=f"sort_{size}",
                library='pandas',
                dataset_size=size
            )
            results.append((size, 'pandas', result_pd))
            
            # –ü—Ä–æ—Ñ–∏–ª–∏—Ä—É–µ–º Polars
            result_pl = profiler.profile_operation(
                lambda: single_sort.execute_polars(df_pl),
                operation_name=f"sort_{size}",
                library='polars',
                dataset_size=size
            )
            results.append((size, 'polars', result_pl))
    
    # –ê–Ω–∞–ª–∏–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏
    logger.info("\nüìà –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:")
    logger.info("-" * 60)
    logger.info(f"{'–†–∞–∑–º–µ—Ä':<10} {'–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞':<10} {'–í—Ä–µ–º—è (—Å)':<12} {'–ü–∞–º—è—Ç—å (MB)':<12}")
    logger.info("-" * 60)
    
    for size, lib, result in results:
        if result.success:
            logger.info(
                f"{size:<10} "
                f"{lib:<10} "
                f"{result.mean_time:<12.4f} "
                f"{result.peak_memory_mb:<12.1f}"
            )
    
    # –ì—Ä–∞—Ñ–∏–∫ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏
    logger.info("\nüìä –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
    for lib in ['pandas', 'polars']:
        lib_results = [(s, r) for s, l, r in results if l == lib and r.success]
        if len(lib_results) >= 2:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º O(n log n) —Å–ª–æ–∂–Ω–æ—Å—Ç—å
            times = [r.mean_time for _, r in lib_results]
            sizes_list = [s for s, _ in lib_results]
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ —Ä–∞—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∫ n log n
            expected_ratio = (sizes_list[-1] * np.log2(sizes_list[-1])) / (sizes_list[0] * np.log2(sizes_list[0]))
            actual_ratio = times[-1] / times[0]
            
            logger.info(f"{lib}: –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–æ—Å—Ç {expected_ratio:.1f}x, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π {actual_ratio:.1f}x")
    
    logger.phase_end("–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    # –ò—Ç–æ–≥–∏
    logger.info("\n" + "=" * 80)
    logger.info("–ò–¢–û–ì–ò")
    logger.info("=" * 80)
    logger.info("\n‚úÖ –í—Å–µ Sort –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã:")
    logger.info("  1. single_column_sort - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ")
    logger.info("  2. multi_column_sort - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–æ–ª–æ–Ω–∫–∞–º")
    logger.info("  3. stable_sort - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞")
    logger.info("\nüöÄ –ö–ª—é—á–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    logger.info("  - Polars –æ–±—ã—á–Ω–æ –≤ 2-5x –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
    logger.info("  - –û–±–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç O(n log n) —Å–ª–æ–∂–Ω–æ—Å—Ç—å")
    logger.info("  - Polars —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞–º—è—Ç—å")
    logger.info("  - –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ –æ–±–µ–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ö")


if __name__ == '__main__':
    try:
        demonstrate_sort_operations()
    except KeyboardInterrupt:
        print("\n\n–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
