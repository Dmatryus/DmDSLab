#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥–∞ Pandas vs Polars.
"""

import sys
import os
import time
import pandas as pd
import polars as pl
import numpy as np
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

from operations.string_ops import (
    StringContainsOperation,
    StringReplaceOperation,
    StringExtractOperation,
    StringConcatOperation,
    StringLengthOperation
)
from utils.logging import get_logger


def create_test_data(size: int = 10000) -> tuple:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏."""
    np.random.seed(42)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    data = {
        # –ü—Ä–æ—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
        'product_code': [f'PROD_{i:05d}' for i in range(size)],
        
        # –°—Ç—Ä–æ–∫–∏ —Å —Ä–∞–∑–ª–∏—á–Ω–æ–π –¥–ª–∏–Ω–æ–π
        'description': [
            f'str_{i % 100}_' + 'x' * np.random.randint(5, 50) 
            for i in range(size)
        ],
        
        # Email-–ø–æ–¥–æ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        'email': [
            f'user_{i % 1000}@{np.random.choice(["gmail", "yahoo", "outlook"])}.com'
            for i in range(size)
        ],
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        'category': np.random.choice(
            ['Electronics', 'Clothing', 'Food', 'Books', 'Sports'],
            size=size
        ),
        
        # –°—Ç—Ä–æ–∫–∏ —Å —á–∏—Å–ª–∞–º–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        'sku': [f'SKU-{np.random.randint(1000, 9999)}-{chr(65 + i % 26)}' 
                for i in range(size)],
        
        # –ß–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        'price': np.random.uniform(10, 1000, size),
        'quantity': np.random.randint(1, 100, size)
    }
    
    df_pandas = pd.DataFrame(data)
    df_polars = pl.DataFrame(data)
    
    return df_pandas, df_polars


def benchmark_operation(operation, df_pandas, df_polars, logger, **kwargs):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ–Ω—á–º–∞—Ä–∫ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    logger.info(f"\nüîπ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {operation.name}")
    logger.info(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {operation.description}")
    
    # Pandas
    start_time = time.time()
    result_pandas = operation.execute_pandas(df_pandas, **kwargs)
    pandas_time = time.time() - start_time
    
    if result_pandas.success:
        logger.info(f"   ‚úì Pandas: {pandas_time:.4f}s")
        if result_pandas.metadata:
            for key, value in result_pandas.metadata.items():
                if key != 'backend':
                    logger.debug(f"     - {key}: {value}")
    else:
        logger.error(f"   Pandas failed: {result_pandas.error}")
    
    # Polars
    start_time = time.time()
    result_polars = operation.execute_polars(df_polars, **kwargs)
    polars_time = time.time() - start_time
    
    if result_polars.success:
        logger.info(f"   ‚úì Polars: {polars_time:.4f}s")
        speedup = pandas_time / polars_time if polars_time > 0 else 0
        logger.info(f"   ‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.2f}x")
    else:
        logger.error(f"   Polars failed: {result_polars.error}")
    
    return result_pandas, result_polars, pandas_time, polars_time


def demonstrate_string_operations():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    logger = get_logger("StringOperationsDemo")
    
    logger.info("=" * 80)
    logger.info("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–¢–†–û–ö–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô")
    logger.info("=" * 80)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    sizes = [10_000, 100_000]
    
    for size in sizes:
        logger.phase_start(f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {size:,} —Å—Ç—Ä–æ–∫")
        
        df_pandas, df_polars = create_test_data(size)
        logger.info(f"‚úì –°–æ–∑–¥–∞–Ω –¥–∞—Ç–∞—Ñ—Ä–µ–π–º: {len(df_pandas.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        logger.info(f"  –°—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {df_pandas.select_dtypes(include=['object']).columns.tolist()}")
        
        # 1. String Contains
        logger.info("\nüìã 1. –ü–†–û–í–ï–†–ö–ê –°–û–î–ï–†–ñ–ê–ù–ò–Ø –ü–û–î–°–¢–†–û–ö–ò")
        op = StringContainsOperation()
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        benchmark_operation(
            op, df_pandas, df_polars, logger,
            column='description',
            substring='str_5',
            case_sensitive=True
        )
        
        # –¢–µ—Å—Ç 2: –ë–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        benchmark_operation(
            op, df_pandas, df_polars, logger,
            column='email',
            substring='GMAIL',
            case_sensitive=False
        )
        
        # 2. String Replace
        logger.info("\nüìã 2. –ó–ê–ú–ï–ù–ê –ü–û–î–°–¢–†–û–ö")
        op = StringReplaceOperation()
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞
        benchmark_operation(
            op, df_pandas, df_polars, logger,
            column='product_code',
            pattern='_',
            replacement='-'
        )
        
        # –¢–µ—Å—Ç 2: Regex –∑–∞–º–µ–Ω–∞
        benchmark_operation(
            op, df_pandas, df_polars, logger,
            column='sku',
            pattern=r'-\d{4}-',
            replacement='-XXXX-',
            regex=True
        )
        
        # 3. String Extract
        logger.info("\nüìã 3. –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ü–û –ü–ê–¢–¢–ï–†–ù–£")
        op = StringExtractOperation()
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–µ–ª –∏–∑ SKU
        result_pandas, result_polars, _, _ = benchmark_operation(
            op, df_pandas, df_polars, logger,
            column='sku',
            pattern=r'SKU-(\d+)-'
        )
        
        if result_pandas.success:
            extracted = result_pandas.result['sku_extracted']
            logger.info(f"   –ü—Ä–∏–º–µ—Ä—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {extracted.dropna().head(3).tolist()}")
        
        # 4. String Concat
        logger.info("\nüìã 4. –ö–û–ù–ö–ê–¢–ï–ù–ê–¶–ò–Ø –°–¢–†–û–ö")
        op = StringConcatOperation()
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
        result_pandas, result_polars, _, _ = benchmark_operation(
            op, df_pandas, df_polars, logger,
            columns=['category', 'product_code', 'price'],
            separator=' | '
        )
        
        if result_pandas.success:
            concat_examples = result_pandas.result['concatenated'].head(3)
            logger.info("   –ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏:")
            for i, example in enumerate(concat_examples):
                logger.info(f"     {i+1}: {example[:50]}...")
        
        # 5. String Length
        logger.info("\nüìã 5. –í–´–ß–ò–°–õ–ï–ù–ò–ï –î–õ–ò–ù–´ –°–¢–†–û–ö")
        op = StringLengthOperation()
        
        result_pandas, result_polars, _, _ = benchmark_operation(
            op, df_pandas, df_polars, logger,
            column='description'
        )
        
        if result_pandas.success:
            stats = result_pandas.metadata['length_stats']
            logger.info(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª–∏–Ω:")
            logger.info(f"     - –ú–∏–Ω–∏–º—É–º: {stats['min']}")
            logger.info(f"     - –ú–∞–∫—Å–∏–º—É–º: {stats['max']}")
            logger.info(f"     - –°—Ä–µ–¥–Ω–µ–µ: {stats['mean']:.2f}")
            logger.info(f"     - –ú–µ–¥–∏–∞–Ω–∞: {stats['median']:.2f}")
        
        logger.phase_end(f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {size:,} —Å—Ç—Ä–æ–∫")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    logger.phase_start("–°–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏")
    
    # –¶–µ–ø–æ—á–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
    logger.info("\nüîó –¶–ï–ü–û–ß–ö–ê –°–¢–†–û–ö–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô")
    
    df_pandas, df_polars = create_test_data(50_000)
    
    # Pandas —Ü–µ–ø–æ—á–∫–∞
    start_time = time.time()
    result = df_pandas.copy()
    result['clean_email'] = result['email'].str.lower()
    result['domain'] = result['clean_email'].str.extract(r'@(\w+)\.')
    result['is_gmail'] = result['domain'] == 'gmail'
    result['email_length'] = result['clean_email'].str.len()
    pandas_chain_time = time.time() - start_time
    
    # Polars —Ü–µ–ø–æ—á–∫–∞
    start_time = time.time()
    result_pl = df_polars.with_columns([
        pl.col('email').str.to_lowercase().alias('clean_email')
    ]).with_columns([
        pl.col('clean_email').str.extract(r'@(\w+)\.', group_index=1).alias('domain'),
        pl.col('clean_email').str.len_chars().alias('email_length')
    ]).with_columns([
        (pl.col('domain') == 'gmail').alias('is_gmail')
    ])
    polars_chain_time = time.time() - start_time
    
    logger.info(f"  Pandas —Ü–µ–ø–æ—á–∫–∞: {pandas_chain_time:.4f}s")
    logger.info(f"  Polars —Ü–µ–ø–æ—á–∫–∞: {polars_chain_time:.4f}s")
    logger.info(f"  ‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {pandas_chain_time/polars_chain_time:.2f}x")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º –æ–ø–µ—Ä–∞—Ü–∏—è–º
    logger.info("\nüìä –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û–°–õ–ï –°–¢–†–û–ö–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô")
    
    # Pandas
    start_time = time.time()
    pandas_grouped = result.groupby('domain')['is_gmail'].agg(['count', 'sum'])
    pandas_group_time = time.time() - start_time
    
    # Polars
    start_time = time.time()
    polars_grouped = result_pl.group_by('domain').agg([
        pl.count().alias('count'),
        pl.col('is_gmail').sum().alias('gmail_count')
    ])
    polars_group_time = time.time() - start_time
    
    logger.info(f"  Pandas –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: {pandas_group_time:.4f}s")
    logger.info(f"  Polars –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: {polars_group_time:.4f}s")
    logger.info(f"  ‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {pandas_group_time/polars_group_time:.2f}x")
    
    logger.phase_end("–°–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏")
    
    # –ò—Ç–æ–≥–∏
    logger.info("\n" + "=" * 80)
    logger.info("–ò–¢–û–ì–ò")
    logger.info("=" * 80)
    
    logger.info("\n‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤—Å–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
    logger.info("  1. string_contains - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∏")
    logger.info("  2. string_replace - –∑–∞–º–µ–Ω–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫")
    logger.info("  3. string_extract - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ regex")
    logger.info("  4. string_concat - –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫")
    logger.info("  5. string_length - –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã")
    
    logger.info("\nüöÄ –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:")
    logger.info("  - Polars –æ–±—ã—á–Ω–æ –≤ 3-8x –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö")
    logger.info("  - –û—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ —Ü–µ–ø–æ—á–∫–∞—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
    logger.info("  - Regex –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ Polars")
    logger.info("  - –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏—è –¥–∞–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    logger.info("\nüéØ –§–∞–∑–∞ 4 –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    logger.info("  ‚úì IO –æ–ø–µ—Ä–∞—Ü–∏–∏")
    logger.info("  ‚úì –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è")
    logger.info("  ‚úì –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞") 
    logger.info("  ‚úì –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞")
    logger.info("  ‚úì –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
    logger.info("  ‚úì –°—Ç—Ä–æ–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")


if __name__ == '__main__':
    try:
        demonstrate_string_operations()
    except KeyboardInterrupt:
        print("\n\n–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
