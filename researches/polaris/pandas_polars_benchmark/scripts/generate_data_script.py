#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
"""

import sys
import click
from pathlib import Path
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent / 'src'))

from core.config import Config
from data import DataGenerator
from utils.logging import setup_logging, get_logger


@click.command()
@click.option(
    '--config', '-c',
    type=click.Path(exists=True, path_type=Path),
    default='configs/default_config.yaml',
    help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
)
@click.option(
    '--output-dir', '-o',
    type=click.Path(path_type=Path),
    default=None,
    help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)'
)
@click.option(
    '--force', '-f',
    is_flag=True,
    help='–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ'
)
@click.option(
    '--sizes',
    type=str,
    default=None,
    help='–†–∞–∑–º–µ—Ä—ã –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000,10000,100000)'
)
@click.option(
    '--verbose', '-v',
    is_flag=True,
    help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
)
def generate_data(config: Path, output_dir: Path, force: bool, sizes: str, verbose: bool):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥–∞ Pandas vs Polars.
    
    –°–æ–∑–¥–∞–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ (numeric, string, datetime, mixed) 
    –∏ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_level = 'DEBUG' if verbose else 'INFO'
    logger = setup_logging(
        name='data_generation',
        console_level=log_level,
        use_colors=True
    )
    
    start_time = time.time()
    
    logger.info("=" * 80)
    logger.info("–ì–ï–ù–ï–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• –î–õ–Ø –ë–ï–ù–ß–ú–ê–†–ö–ê")
    logger.info("=" * 80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config}")
    cfg = Config(config)
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω output_dir, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if output_dir:
        data_dir = output_dir
    else:
        data_dir = Path(cfg.get_section('paths').get('data_dir', 'data/generated'))
    
    logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: {data_dir}")
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if sizes:
        try:
            custom_sizes = [int(s.strip()) for s in sizes.split(',')]
            cfg.data_generation.sizes = custom_sizes
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã: {custom_sizes}")
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–º–µ—Ä–æ–≤: {e}")
            sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    if data_dir.exists() and not force:
        existing_files = list(data_dir.rglob('*.csv')) + list(data_dir.rglob('*.parquet'))
        if existing_files:
            logger.warning(f"–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {data_dir} —É–∂–µ –µ—Å—Ç—å {len(existing_files)} —Ñ–∞–π–ª–æ–≤")
            if not click.confirm("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ?"):
                logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
    
    # –í—ã–≤–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    logger.info("\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
    logger.info(f"  –†–∞–∑–º–µ—Ä—ã: {cfg.data_generation.sizes}")
    logger.info(f"  Seed: {cfg.data_generation.seed}")
    logger.info(f"  –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:")
    logger.info(f"    - Numeric: {cfg.data_generation.numeric_columns} –∫–æ–ª–æ–Ω–æ–∫")
    logger.info(f"    - String: {cfg.data_generation.string_columns} –∫–æ–ª–æ–Ω–æ–∫")
    logger.info(f"    - Datetime: {cfg.data_generation.datetime_columns} –∫–æ–ª–æ–Ω–æ–∫")
    logger.info(f"    - Mixed: {cfg.data_generation.mixed_numeric_columns} numeric, "
                f"{cfg.data_generation.mixed_string_columns} string, "
                f"{cfg.data_generation.mixed_datetime_columns} datetime")
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = DataGenerator(
        config=cfg.data_generation,
        output_dir=data_dir
    )
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –¥–∞—Ç–∞—Å–µ—Ç—ã
        datasets = generator.generate_all_datasets()
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
        logger.info("\n" + "=" * 80)
        logger.info("–°–í–û–î–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò")
        logger.info("=" * 80)
        
        total_size_mb = 0
        total_files = 0
        
        for ds in datasets:
            csv_size = ds.file_paths['csv'].stat().st_size / (1024 * 1024)
            parquet_size = ds.file_paths['parquet'].stat().st_size / (1024 * 1024)
            total_size_mb += csv_size + parquet_size
            total_files += 2
            
            logger.info(f"\nüìä {ds.name}:")
            logger.info(f"   –°—Ç—Ä–æ–∫: {ds.size:,}")
            logger.info(f"   –ö–æ–ª–æ–Ω–æ–∫: {len(ds.columns)}")
            logger.info(f"   –í –ø–∞–º—è—Ç–∏: {ds.memory_size_mb:.1f} MB")
            logger.info(f"   CSV: {csv_size:.1f} MB")
            logger.info(f"   Parquet: {parquet_size:.1f} MB")
            logger.info(f"   –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {ds.generation_time_sec:.2f}—Å")
        
        elapsed_time = time.time() - start_time
        
        logger.info(f"\n{'=' * 40}")
        logger.info(f"‚úÖ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        logger.info(f"{'=' * 40}")
        logger.info(f"–í—Å–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤: {len(datasets)}")
        logger.info(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
        logger.info(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size_mb:.1f} MB")
        logger.info(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.1f}—Å")
        logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {data_dir.absolute()}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        sys.exit(1)


if __name__ == '__main__':
    generate_data()
