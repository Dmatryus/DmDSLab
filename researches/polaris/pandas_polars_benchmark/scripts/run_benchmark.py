#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥–∞ Pandas vs Polars.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python run_benchmark.py --config configs/default_config.yaml
    python run_benchmark.py --resume
    python run_benchmark.py --config configs/small_test.yaml --dry-run
"""

import sys
import click
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent / 'src'))

from core.benchmark_runner import BenchmarkRunner, create_benchmark_runner
from utils.logging import setup_logging, get_logger


@click.command()
@click.option(
    '--config', '-c',
    type=click.Path(exists=True, path_type=Path),
    help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
)
@click.option(
    '--resume', '-r',
    is_flag=True,
    help='–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ–∫–ø–æ–∏–Ω—Ç–∞'
)
@click.option(
    '--output-dir', '-o',
    type=click.Path(path_type=Path),
    default='results',
    help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
)
@click.option(
    '--dry-run',
    is_flag=True,
    help='–¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
)
@click.option(
    '--validate-only',
    is_flag=True,
    help='–¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
)
@click.option(
    '--verbose', '-v',
    is_flag=True,
    help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
)
@click.option(
    '--quiet', '-q',
    is_flag=True,
    help='–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥'
)
@click.option(
    '--force',
    is_flag=True,
    help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)'
)
def main(config: Path,
         resume: bool,
         output_dir: Path,
         dry_run: bool,
         validate_only: bool,
         verbose: bool,
         quiet: bool,
         force: bool) -> None:
    """
    –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –±–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥–∞ Pandas vs Polars.
    
    –°–∏—Å—Ç–µ–º–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–≤—É—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö –∏ —Ä–∞–∑–º–µ—Ä–∞—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if quiet:
        log_level = 'WARNING'
    elif verbose:
        log_level = 'DEBUG'
    else:
        log_level = 'INFO'
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è CLI
    setup_logging(console_level=log_level, use_colors=True)
    logger = get_logger('cli')
    
    # ASCII –∞—Ä—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if not quiet:
        print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        PANDAS vs POLARS BENCHMARK SYSTEM v1.0                ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if resume:
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–µ–∫–ø–æ–∏–Ω—Ç
        checkpoint_dir = output_dir / "checkpoints"
        if not checkpoint_dir.exists():
            logger.error("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            sys.exit(1)
        
        checkpoints = list(checkpoint_dir.glob("checkpoint_*.json"))
        if not checkpoints:
            logger.error("–ß–µ–∫–ø–æ–∏–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            sys.exit(1)
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–µ–∫–ø–æ–∏–Ω—Ç
        latest_checkpoint = max(checkpoints, key=lambda p: p.stat().st_mtime)
        logger.info(f"–ù–∞–π–¥–µ–Ω —á–µ–∫–ø–æ–∏–Ω—Ç: {latest_checkpoint.name}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —á–µ–∫–ø–æ–∏–Ω—Ç–∞
        import json
        with open(latest_checkpoint, 'r') as f:
            checkpoint_data = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        temp_config = output_dir / "temp_resume_config.yaml"
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —á–µ–∫–ø–æ–∏–Ω—Ç–∞
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ config –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —á–µ–∫–ø–æ–∏–Ω—Ç–µ
        
        if not config:
            logger.error("–ü—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not resume and not config:
        logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (--config) –∏–ª–∏ —Ñ–ª–∞–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (--resume)")
        sys.exit(1)
    
    # –¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if validate_only:
        logger.info("–†–µ–∂–∏–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        try:
            runner = create_benchmark_runner(
                config_path=config,
                output_dir=output_dir,
                dry_run=True
            )
            if runner._validate_environment():
                logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                sys.exit(0)
            else:
                logger.error("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
                sys.exit(1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if not resume and output_dir.exists() and not force:
        existing_files = list(output_dir.glob("**/*"))
        if existing_files:
            logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {output_dir} —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª—ã")
            if not dry_run:
                response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/n): ")
                if response.lower() != 'y':
                    logger.info("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    sys.exit(0)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞
    try:
        logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config}")
        logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {output_dir}")
        logger.info(f"–†–µ–∂–∏–º: {'–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ' if resume else '–ù–æ–≤—ã–π –∑–∞–ø—É—Å–∫'}")
        
        if dry_run:
            logger.info("üîç –†–µ–∂–∏–º DRY RUN - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ runner
        runner = create_benchmark_runner(
            config_path=config,
            resume=resume,
            dry_run=dry_run,
            output_dir=output_dir
        )
        
        # –ó–∞–ø—É—Å–∫
        start_time = datetime.now()
        success = runner.run()
        end_time = datetime.now()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if success:
            duration = end_time - start_time
            logger.info(f"\n‚úÖ –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {duration}")
            
            if not dry_run:
                logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")
                logger.info(f"üìà –û—Ç—á–µ—Ç: {output_dir}/reports/")
                logger.info(f"üìâ –ê–Ω–∞–ª–∏–∑: {output_dir}/analysis/")
                logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ: {output_dir}/data/")
        else:
            logger.error("\n‚ùå –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
            
    except KeyboardInterrupt:
        logger.warning("\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --resume –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
        sys.exit(1)
    except Exception as e:
        logger.error(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=verbose)
        sys.exit(1)


if __name__ == '__main__':
    main()
