#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞ –±–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥–∞ Pandas vs Polars.
"""

import os
import sys
from pathlib import Path
from typing import List, Dict


def create_project_structure() -> bool:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –±–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥–∞.

    Returns:
        bool: True –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    base_dir = Path.cwd() / "pandas_polars_benchmark"

    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
    project_structure = {
        "src": {
            "core": [
                "__init__.py",
                "config.py",
                "runner.py",
                "checkpoint.py",
                "progress.py",
            ],
            "data": ["__init__.py", "generator.py", "loaders.py", "savers.py"],
            "profiling": [
                "__init__.py",
                "profiler.py",
                "memory_tracker.py",
                "timer.py",
            ],
            "operations": [
                "__init__.py",
                "base.py",
                "io_ops.py",
                "filter_ops.py",
                "groupby_ops.py",
                "sort_ops.py",
                "join_ops.py",
                "string_ops.py",
            ],
            "analysis": [
                "__init__.py",
                "statistical.py",
                "outliers.py",
                "comparisons.py",
            ],
            "reporting": [
                "__init__.py",
                "generator.py",
                "visualizations.py",
                "templates/",
            ],
            "utils": ["__init__.py", "logging.py", "validators.py", "helpers.py"],
        },
        "tests": {
            "unit": [
                "test_config.py",
                "test_generator.py",
                "test_profiler.py",
                "test_operations.py",
                "test_analysis.py",
            ],
            "integration": ["test_workflow.py", "test_checkpoints.py"],
            "fixtures": ["sample_config.yaml", "test_data/"],
        },
        "configs": ["default_config.yaml", "config_schema.yaml"],
        "data": {"generated": [], "metadata": []},
        "results": {"raw": [], "processed": [], "checkpoints": []},
        "reports": {"html": [], "assets": ["css/", "js/", "images/"]},
        "logs": [],
        "docs": ["README.md", "ARCHITECTURE.md", "USER_GUIDE.md"],
        "scripts": ["run_benchmark.py", "validate_config.py", "clean_data.py"],
    }

    try:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        base_dir.mkdir(exist_ok=True)
        print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {base_dir}")

        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        def create_structure(current_path: Path, structure: Dict) -> None:
            for name, content in structure.items():
                path = current_path / name

                if isinstance(content, dict):
                    # –≠—Ç–æ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                    path.mkdir(exist_ok=True)
                    print(f"  üìÅ {path.relative_to(base_dir)}")
                    create_structure(path, content)
                elif isinstance(content, list):
                    # –≠—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–∞–π–ª–∞–º–∏
                    path.mkdir(exist_ok=True)
                    print(f"  üìÅ {path.relative_to(base_dir)}")

                    for file_name in content:
                        if file_name.endswith("/"):
                            # –≠—Ç–æ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                            subdir = path / file_name.rstrip("/")
                            subdir.mkdir(exist_ok=True)
                            print(f"    üìÅ {subdir.relative_to(base_dir)}")
                        else:
                            # –≠—Ç–æ —Ñ–∞–π–ª
                            file_path = path / file_name
                            if not file_path.exists():
                                file_path.touch()
                                print(f"    üìÑ {file_path.relative_to(base_dir)}")

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        create_structure(base_dir, project_structure)

        # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        root_files = [
            ".gitignore",
            "requirements.txt",
            "requirements-dev.txt",
            "setup.py",
            "README.md",
            "LICENSE",
            ".env.example",
        ]

        print("\nüìÅ –ö–æ—Ä–Ω–µ–≤—ã–µ —Ñ–∞–π–ª—ã:")
        for file_name in root_files:
            file_path = base_dir / file_name
            if not file_path.exists():
                file_path.touch()
                print(f"  üìÑ {file_name}")

        print(f"\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤: {base_dir}")
        return True

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}", file=sys.stderr)
        return False


def create_gitignore_content() -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è .gitignore —Ñ–∞–π–ª–∞.

    Returns:
        str: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ .gitignore
    """
    return """# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/
.venv
pip-log.txt
pip-delete-this-directory.txt
.pytest_cache/
.coverage
htmlcov/
.tox/
.mypy_cache/
.dmypy.json
dmypy.json

# Project specific
data/generated/
results/raw/
results/checkpoints/
logs/*.log
reports/html/*.html
*.parquet
*.csv
!tests/fixtures/*.csv

# IDE
.idea/
.vscode/
*.swp
*.swo
*~
.DS_Store

# Environment
.env
.env.local

# Jupyter
.ipynb_checkpoints/
*.ipynb

# Distribution
dist/
build/
*.egg-info/
"""


def initialize_project_files() -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ —Å –±–∞–∑–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.
    """
    base_dir = Path.cwd() / "pandas_polars_benchmark"

    # –°–æ–∑–¥–∞–µ–º .gitignore
    gitignore_path = base_dir / ".gitignore"
    gitignore_path.write_text(create_gitignore_content(), encoding="utf-8")
    print(f"‚úì –°–æ–∑–¥–∞–Ω .gitignore")

    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π requirements.txt
    requirements = """# Core dependencies
pandas>=2.0.0
polars>=0.19.0
numpy>=1.24.0
pyyaml>=6.0
jsonschema>=4.17.0
psutil>=5.9.0
click>=8.1.0

# Analysis and reporting
scipy>=1.10.0
plotly>=5.14.0
jinja2>=3.1.0
tabulate>=0.9.0

# Development
pytest>=7.3.0
pytest-cov>=4.0.0
black>=23.3.0
flake8>=6.0.0
mypy>=1.3.0
pre-commit>=3.3.0

# Logging
colorlog>=6.7.0
tqdm>=4.65.0
"""

    requirements_path = base_dir / "requirements.txt"
    requirements_path.write_text(requirements, encoding="utf-8")
    print(f"‚úì –°–æ–∑–¥–∞–Ω requirements.txt")

    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π README.md
    readme_content = """# Pandas vs Polars Benchmark System

Comprehensive benchmarking system for comparing performance between Pandas and Polars libraries.

## Features

- Automated data generation with various types and sizes
- Isolated profiling with memory tracking
- Statistical analysis with outlier detection
- Interactive HTML reports with visualizations
- Checkpoint system for resumable runs
- Configurable operations and parameters

## Installation

```bash
# Create virtual environment
python -m venv venv
source venv/bin/activate  # On Windows: venv\\Scripts\\activate

# Install dependencies
pip install -r requirements.txt
```

## Quick Start

```bash
# Run benchmark with default configuration
python scripts/run_benchmark.py --config configs/default_config.yaml

# Resume from checkpoint
python scripts/run_benchmark.py --resume

# Validate configuration only
python scripts/validate_config.py --config configs/default_config.yaml
```

## Project Structure

```
pandas_polars_benchmark/
‚îú‚îÄ‚îÄ src/               # Source code
‚îú‚îÄ‚îÄ tests/             # Test suite
‚îú‚îÄ‚îÄ configs/           # Configuration files
‚îú‚îÄ‚îÄ data/              # Generated datasets
‚îú‚îÄ‚îÄ results/           # Benchmark results
‚îú‚îÄ‚îÄ reports/           # Generated reports
‚îú‚îÄ‚îÄ logs/              # Execution logs
‚îî‚îÄ‚îÄ scripts/           # Executable scripts
```

## Documentation

- [Architecture](docs/ARCHITECTURE.md)
- [User Guide](docs/USER_GUIDE.md)

## License

MIT License
"""

    readme_path = base_dir / "README.md"
    readme_path.write_text(readme_content, encoding="utf-8")
    print(f"‚úì –°–æ–∑–¥–∞–Ω README.md")


if __name__ == "__main__":
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –±–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥–∞ Pandas vs Polars\n")

    if create_project_structure():
        print("\nüìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...")
        initialize_project_files()
        print("\n‚ú® –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
        print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. cd pandas_polars_benchmark")
        print("2. python -m venv venv")
        print("3. source venv/bin/activate  # –ù–∞ Windows: venv\\Scripts\\activate")
        print("4. pip install -r requirements.txt")
    else:
        sys.exit(1)
