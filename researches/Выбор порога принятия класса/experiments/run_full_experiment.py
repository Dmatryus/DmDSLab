"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:
1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
2. –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
"""

import os
import sys
import time
import argparse
import yaml
import json
from pathlib import Path
from datetime import datetime
import multiprocessing as mp
from typing import Dict, Optional

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from data_preparation import DatasetPreparer
from experiment_runner import ExperimentRunner, ExperimentConfig, create_default_config
from experiment_monitor import ExperimentMonitor
from report_generator import generate_experiment_report


class ExperimentOrchestrator:
    """–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω—ã–º —Ü–∏–∫–ª–æ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞."""
    
    def __init__(self, config_path: Optional[str] = None):
        """
        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ YAML
        """
        self.config_path = config_path
        self.config = None
        self.results_dir = None
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
    def load_config(self) -> ExperimentConfig:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π."""
        if self.config_path and os.path.exists(self.config_path):
            print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ {self.config_path}")
            with open(self.config_path, 'r') as f:
                config_dict = yaml.safe_load(f)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ ExperimentConfig
            self.config = ExperimentConfig(**config_dict)
        else:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            self.config = create_default_config()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å timestamp
        self.results_dir = Path(self.config.results_dir) / f"run_{self.timestamp}"
        self.results_dir.mkdir(parents=True, exist_ok=True)
        self.config.results_dir = str(self.results_dir)
        
        return self.config
    
    def prepare_data(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤."""
        print("\n" + "="*60)
        print("–≠–¢–ê–ü 1: –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–•")
        print("="*60)
        
        preparer = DatasetPreparer(random_state=self.config.random_state)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        prepared_file = 'prepared_datasets.pkl'
        if os.path.exists(prepared_file):
            print("‚úì –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã")
            response = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ? (y/n): ").strip().lower()
            if response == 'y':
                return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("\n–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤...")
        datasets = preparer.prepare_all_datasets(self.config.datasets)
        
        print(f"\n‚úì –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤: {len(datasets)}")
        for name, info in datasets.items():
            print(f"  - {name}: {info['preprocessing_info']['processed_shape']}")
    
    def run_experiments(self, monitor: bool = True):
        """–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º."""
        print("\n" + "="*60)
        print("–≠–¢–ê–ü 2: –ü–†–û–í–ï–î–ï–ù–ò–ï –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–û–í")
        print("="*60)
        
        # –°–æ–∑–¥–∞–µ–º runner
        runner = ExperimentRunner(self.config)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
        total_experiments = (
            sum(len(names) for names in self.config.datasets.values()) *
            len(self.config.models) *
            sum(len(methods) for methods in self.config.threshold_methods.values()) *
            self.config.n_runs
        )
        
        print(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {total_experiments}")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.results_dir}")
        
        if monitor:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            monitor_process = mp.Process(
                target=self._run_monitor,
                args=(str(self.results_dir), total_experiments)
            )
            monitor_process.start()
            time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã
        start_time = time.time()
        try:
            df_results, aggregated = runner.run()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = {
                'total_time': time.time() - start_time,
                'total_experiments': total_experiments,
                'completed_experiments': len(runner.results),
                'success_rate': len(runner.results) / total_experiments * 100
            }
            
            stats_file = self.results_dir / 'experiment_stats.json'
            with open(stats_file, 'w') as f:
                json.dump(stats, f, indent=2)
                
        finally:
            if monitor and monitor_process.is_alive():
                monitor_process.terminate()
                monitor_process.join()
        
        return df_results, aggregated
    
    def _run_monitor(self, results_dir: str, total_experiments: int):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ."""
        monitor = ExperimentMonitor(results_dir, update_interval=5)
        monitor.start_monitoring(total_experiments)
        
        try:
            while monitor.completed_experiments < total_experiments:
                monitor.update()
                time.sleep(monitor.update_interval)
        except KeyboardInterrupt:
            pass
        finally:
            monitor.save_monitoring_results()
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞."""
        print("\n" + "="*60)
        print("–≠–¢–ê–ü 3: –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê")
        print("="*60)
        
        report_path = generate_experiment_report(
            str(self.results_dir),
            output_file=self.results_dir / f"report_{self.timestamp}.html"
        )
        
        return report_path
    
    def run_full_pipeline(self, skip_data_prep: bool = False, 
                         skip_experiments: bool = False,
                         monitor: bool = True):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞."""
        print(f"\n{'='*60}")
        print(f"–ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê")
        print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now()}")
        print(f"{'='*60}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.load_config()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_file = self.results_dir / 'experiment_config.yaml'
        with open(config_file, 'w') as f:
            yaml.dump(self.config.__dict__, f, default_flow_style=False)
        
        # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if not skip_data_prep:
            self.prepare_data()
        
        # 2. –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
        if not skip_experiments:
            df_results, aggregated = self.run_experiments(monitor=monitor)
        
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report_path = self.generate_report()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n{'='*60}")
        print(f"–≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢ –ó–ê–í–ï–†–®–ï–ù")
        print(f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {datetime.now()}")
        print(f"{'='*60}")
        print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.results_dir}")
        print(f"üìä HTML –æ—Ç—á–µ—Ç: {report_path}")
        print(f"\n‚úÖ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        return report_path


def create_config_template(output_path: str = 'experiment_config_template.yaml'):
    """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
    template = {
        'experiment_name': 'threshold_comparison_experiment',
        'datasets': {
            'binary': ['breast_cancer', 'heart_disease', 'bank_marketing'],
            'multiclass': ['iris', 'wine_quality', 'satellite']
        },
        'models': [
            {
                'name': 'catboost',
                'params': {
                    'iterations': 500,
                    'learning_rate': 0.03,
                    'depth': 6,
                    'verbose': False
                }
            },
            {
                'name': 'random_forest',
                'params': {
                    'n_estimators': 100,
                    'max_depth': 10
                }
            },
            {
                'name': 'lightgbm',
                'params': {
                    'n_estimators': 500,
                    'learning_rate': 0.05,
                    'num_leaves': 31
                }
            },
            {
                'name': 'extra_trees',
                'params': {
                    'n_estimators': 100,
                    'max_depth': 10
                }
            },
            {
                'name': 'logistic_regression',
                'params': {
                    'max_iter': 1000
                }
            }
        ],
        'threshold_methods': {
            'binary': ['f1_optimization', 'youden', 'cost_sensitive', 'precision_recall_balance'],
            'multiclass': ['entropy', 'margin', 'top_k', 'temperature'],
            'universal': ['percentile', 'fixed', 'adaptive']
        },
        'pseudo_labeling_strategy': 'hard',  # 'hard', 'soft', 'iterative', 'self_training'
        'random_state': 42,
        'n_runs': 3,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        'calibration_method': 'isotonic',  # 'sigmoid', 'isotonic', None
        'save_intermediate': True,
        'results_dir': 'experiment_results'
    }
    
    with open(output_path, 'w') as f:
        yaml.dump(template, f, default_flow_style=False, sort_keys=False)
    
    print(f"–®–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: {output_path}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º."""
    parser = argparse.ArgumentParser(
        description='–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é –º–µ—Ç–æ–¥–æ–≤ –≤—ã–±–æ—Ä–∞ –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è –ø—Å–µ–≤–¥–æ-—Ä–∞–∑–º–µ—Ç–∫–∏'
    )
    
    parser.add_argument(
        '--config', '-c',
        type=str,
        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ YAML'
    )
    
    parser.add_argument(
        '--mode', '-m',
        choices=['full', 'quick', 'test', 'config'],
        default='full',
        help='–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: full (–ø–æ–ª–Ω—ã–π), quick (–±—ã—Å—Ç—Ä—ã–π), test (—Ç–µ—Å—Ç–æ–≤—ã–π), config (—Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω)'
    )
    
    parser.add_argument(
        '--skip-data-prep',
        action='store_true',
        help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–∞–ø –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö'
    )
    
    parser.add_argument(
        '--skip-experiments',
        action='store_true',
        help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–∞–ø —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç)'
    )
    
    parser.add_argument(
        '--no-monitor',
        action='store_true',
        help='–û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞'
    )
    
    args = parser.parse_args()
    
    # –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if args.mode == 'config':
        create_config_template()
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    orchestrator = ExperimentOrchestrator(args.config)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    if args.mode == 'test':
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        orchestrator.config = ExperimentConfig(
            datasets={'binary': ['breast_cancer'], 'multiclass': ['iris']},
            models=[
                {'name': 'random_forest', 'params': {'n_estimators': 50}},
                {'name': 'logistic_regression', 'params': {}}
            ],
            threshold_methods={
                'binary': ['f1_optimization'],
                'multiclass': ['entropy'],
                'universal': ['percentile']
            },
            pseudo_labeling_strategy='hard',
            random_state=42,
            n_runs=1,
            calibration_method=None,
            save_intermediate=True,
            results_dir='test_results',
            experiment_name='test_experiment'
        )
    elif args.mode == 'quick':
        # –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º - –º–µ–Ω—å—à–µ –º–æ–¥–µ–ª–µ–π –∏ –º–µ—Ç–æ–¥–æ–≤
        if not args.config:
            orchestrator.config = create_default_config()
            orchestrator.config.n_runs = 1
            orchestrator.config.models = orchestrator.config.models[:2]  # –¢–æ–ª—å–∫–æ 2 –º–æ–¥–µ–ª–∏
            orchestrator.config.threshold_methods = {
                'binary': ['f1_optimization', 'youden'],
                'multiclass': ['entropy'],
                'universal': ['percentile']
            }
    
    # –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
    try:
        orchestrator.run_full_pipeline(
            skip_data_prep=args.skip_data_prep,
            skip_experiments=args.skip_experiments,
            monitor=not args.no_monitor
        )
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞: {e}")
        raise


if __name__ == "__main__":
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(sys.argv) == 1:
        print("üî¨ –°–∏—Å—Ç–µ–º–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –ø–æ –≤—ã–±–æ—Ä—É –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è –ø—Å–µ–≤–¥–æ-—Ä–∞–∑–º–µ—Ç–∫–∏")
        print("="*60)
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
        print("1. –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç")
        print("2. –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä)")
        print("3. –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π)")
        print("4. –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("5. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
        print("6. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-6): ").strip()
        
        if choice == '1':
            orchestrator = ExperimentOrchestrator()
            orchestrator.run_full_pipeline()
        
        elif choice == '2':
            orchestrator = ExperimentOrchestrator()
            orchestrator.config = create_default_config()
            orchestrator.config.n_runs = 1
            orchestrator.config.models = orchestrator.config.models[:2]
            orchestrator.config.threshold_methods = {
                'binary': ['f1_optimization', 'youden'],
                'multiclass': ['entropy'],
                'universal': ['percentile']
            }
            orchestrator.run_full_pipeline()
        
        elif choice == '3':
            orchestrator = ExperimentOrchestrator()
            orchestrator.config = ExperimentConfig(
                datasets={'binary': ['breast_cancer'], 'multiclass': ['iris']},
                models=[
                    {'name': 'random_forest', 'params': {'n_estimators': 50}}
                ],
                threshold_methods={
                    'binary': ['f1_optimization'],
                    'multiclass': ['entropy'],
                    'universal': ['percentile']
                },
                pseudo_labeling_strategy='hard',
                random_state=42,
                n_runs=1,
                calibration_method=None,
                save_intermediate=True,
                results_dir='test_results',
                experiment_name='test_experiment'
            )
            orchestrator.run_full_pipeline()
        
        elif choice == '4':
            create_config_template()
        
        elif choice == '5':
            config_path = input("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ").strip()
            if os.path.exists(config_path):
                orchestrator = ExperimentOrchestrator(config_path)
                orchestrator.run_full_pipeline()
            else:
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        
        elif choice == '6':
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            sys.exit(0)
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    else:
        # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        main()
