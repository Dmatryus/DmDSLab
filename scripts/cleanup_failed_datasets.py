#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã
"""

from dmdslab.datasets.uci_dataset_manager import UCIDatasetManager
import time

def cleanup_failed_datasets(auto_confirm=False):
    """–ù–∞—Ö–æ–¥–∏—Ç –∏ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã"""
    manager = UCIDatasetManager()
    all_datasets = manager.filter_datasets()
    
    print("üîç –ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤...\n")
    
    failed_datasets = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    for i, dataset in enumerate(all_datasets, 1):
        print(f"[{i}/{len(all_datasets)}] –ü—Ä–æ–≤–µ—Ä–∫–∞ {dataset.name} (ID: {dataset.id})...", end=" ", flush=True)
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            _ = manager.load_dataset(dataset.id)
            print("‚úÖ")
        except Exception as e:
            print("‚ùå")
            error_msg = str(e)
            if "not available for import" in error_msg or "Failed to load" in error_msg:
                failed_datasets.append({
                    'id': dataset.id,
                    'name': dataset.name,
                    'error': error_msg
                })
    
    if not failed_datasets:
        print("\n‚úÖ –í—Å–µ –¥–∞—Ç–∞—Å–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã!")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã
    print(f"\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(failed_datasets)} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤:")
    for ds in failed_datasets:
        print(f"   - {ds['name']} (ID: {ds['id']})")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if not auto_confirm:
        response = input(f"\n‚ùì –£–¥–∞–ª–∏—Ç—å —ç—Ç–∏ {len(failed_datasets)} –¥–∞—Ç–∞—Å–µ—Ç–æ–≤? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            return
    
    # –£–¥–∞–ª—è–µ–º
    print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤...")
    deleted_count = 0
    
    for ds in failed_datasets:
        print(f"   –£–¥–∞–ª–µ–Ω–∏–µ {ds['name']}...", end=" ", flush=True)
        if manager.delete_dataset(ds['id']):
            print("‚úÖ")
            deleted_count += 1
        else:
            print("‚ùå")
        time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   - –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤: {len(all_datasets)}")
    print(f"   - –ù–∞–π–¥–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {len(failed_datasets)}")
    print(f"   - –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_count}")
    
    stats = manager.get_statistics()
    print(f"   - –û—Å—Ç–∞–ª–æ—Å—å –≤ –±–∞–∑–µ: {stats['total_datasets']}")

if __name__ == "__main__":
    import sys
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    auto_confirm = "--auto" in sys.argv or "-y" in sys.argv
    
    if auto_confirm:
        print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º (–±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π)")
    
    cleanup_failed_datasets(auto_confirm)
